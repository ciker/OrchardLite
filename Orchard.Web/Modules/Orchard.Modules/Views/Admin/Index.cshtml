@model Orchard.Modules.ViewModels.ModulesIndexViewModel
@using Orchard.Modules.Models;
@using Orchard.Mvc.Html;
@using Orchard.Modules.ViewModels;
@using Orchard.Environment.Extensions.Models;
@using Orchard.Utility.Extensions;




@{
    Style.Require("ModulesAdmin");
    ViewBag.Title = "Installed modules";
}


@using (Html.BeginFormAntiForgeryPost(Url.Action("Index", "Admin")))
{
    <fieldset class="search-actions">
        <input type="text" id="searchText" class="text single-line" name="@Html.NameOf(m => m.Options.SearchText)" value="@Model.Options.SearchText" />

        <button type="submit">@T("Search").ToString()</button>
    </fieldset>

    if (Model.InstallModules)
    {
        <span>@Html.ActionLink(T("Install a module from your computer").ToString(), "AddModule", "PackagingServices", new { area = "Orchard.Packaging", returnUrl = HttpContext.Current.Request.RawUrl }, null)</span>
    }

    if (Model.Modules.Any())
    {
        <ul class="contentItems">
            @foreach (ModuleEntry module in Model.Modules.OrderBy(m => m.Descriptor.Name))
            {
                var moduleClasses = module.IsRecentlyInstalled ? "class=\"recentlyInstalledModule\"" : String.Empty;
                <li>
                    <div class="summary">
                        @if (module.Notifications != null && module.Notifications.Count > 0)
                        {
                            <div class="notifications">
                                @foreach (var notification in module.Notifications)
                                {
                                    <h5>@Html.Raw(notification)</h5>
                                }
                            </div>
                        }
                        <div class="properties">
                            <h2 @Html.Raw(moduleClasses)>
                                @module.Descriptor.Name
                            </h2>

                                            @*@Html.ActionLink(
                            T("Uninstall").Text,
                            "UninstallModule",
                            "PackagingServices",
                            new { ModuleId = module.Descriptor.Id, ReturnUrl = Request.ToUrlString(), Area = "Orchard.Packaging" },
                            new { itemprop = "RemoveUrl UnsafeUrl" })*@

                            @if (!String.IsNullOrEmpty(module.Descriptor.Description))
                            {
                                <p>@module.Descriptor.Description</p>
                            }

                            <ul class="pageStatus" style="color:#666; margin:.6em 0 0 0;">
                                @{ var features = module.Descriptor.Features; }
                                <li>@T("Features: {0}", MvcHtmlString.Create(String.Join(", ", features.Select(f => Html.Link(String.IsNullOrEmpty(f.Name) ? f.Id : f.Name, String.Format("{0}#{1}", Url.Action("features", new { area = "Orchard.Modules" }), f.Id)).ToString()).OrderBy(s => s).ToArray())))</li>
                                @*<li>&nbsp;&#124;&nbsp;@T("Author: {0}", !String.IsNullOrEmpty(module.Descriptor.Author) ? module.Descriptor.Author : T("Unknown").ToString())</li>
                                <li>
                                    &nbsp;&#124;&nbsp;@T("Website: ")
                                    @if (!String.IsNullOrEmpty(module.Descriptor.WebSite))
                                    { <a href="@module.Descriptor.WebSite">@module.Descriptor.WebSite</a> }
                                    else
                                    { @T("Unknown").ToString() }
                                </li>*@
                            </ul>
                        </div>
                    </div>

                     @*@Display.ModuleEntry(Module: module)*@
                </li>
            }
        </ul>
    }
    else
    {
        <p>@T("No modules available").ToString()</p>
    }

    @Html.Partial("Pager", Model.Pager)
}



